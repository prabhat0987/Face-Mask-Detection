import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten

# Data Augmentation (training data)
genTrainData = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
train_data = genTrainData.flow_from_directory('Train', target_size=(64,64), batch_size=32, class_mode='binary')


# For validation, test data
genTestData = ImageDataGenerator(rescale=1./255)
validation_data = genTrainData.flow_from_directory('Validation', target_size=(64,64), batch_size=32, class_mode='binary')
test_data = genTrainData.flow_from_directory('Test', target_size=(64,64), batch_size=32, class_mode='binary')


# Adding layers to model
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))
model.add(MaxPool2D(pool_size=2, strides=2))
model.add(Conv2D(filters=32, kernel_size=3, activation='relu'))
model.add(MaxPool2D(pool_size=2, strides=2))
model.add(Flatten())
model.add(Dense(units=128, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))


# Training model
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
history = model.fit(x = train_data, validation_data = validation_data, epochs = 15)


# Ploting loss
plt.plot(history.history['val_loss'], label='validation loss')
plt.title('validation loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show(
